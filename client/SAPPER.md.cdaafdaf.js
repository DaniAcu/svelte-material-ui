import{S as n,i as s,s as a,e as t,t as e,a as p,f as o,g as c,h as l,d as u,b as i,l as r,m as k,n as h,y as m,c as d,q as g,j as f,o as w,p as y,r as v,u as E}from"./client.930fc604.js";function S(n){let s,a,d,g,f,w,y,v,E,S,T,b,M,P,x,I,q,L,j,O,H,R,C,$,A,D,U,_,N,B,z,Y,F,G,J,K,Q,V,W,X,Z,nn,sn,an,tn,en,pn,on,cn,ln,un,rn,kn,hn,mn,dn,gn,fn,wn,yn,vn,En,Sn,Tn,bn,Mn,Pn,xn,In,qn,Ln,jn,On,Hn,Rn,Cn,$n,An,Dn,Un,_n;return{c(){s=t("h1"),a=e("Integration for Sapper"),d=p(),g=t("sub"),f=e("\\* As of 2021-Apr-06, these instructions will now work without a flash of unstyled content!"),w=p(),y=t("p"),v=e("These instructions are for the Advanced Styling Method. If you don’t need the advantages of this method, it’s much easier to use the "),E=t("a"),S=e("Easy Styling Method"),T=e("."),b=p(),M=t("p"),P=e("Install the following packages as dev dependencies."),x=p(),I=t("pre"),q=p(),L=t("p"),j=e("Create the "),O=t("code"),H=e("src/theme/_smui-theme.scss"),R=e(" file."),C=p(),$=t("pre"),A=p(),D=t("p"),U=e("Update "),_=t("code"),N=e("rollup.config.js"),B=e(" with the following configuration."),z=p(),Y=t("pre"),F=p(),G=t("p"),J=e("In the "),K=t("code"),Q=e("template.html"),V=e(" file, in the "),W=t("code"),X=e("<head>"),Z=e(" section right after "),nn=t("code"),sn=e("%sapper.base%"),an=e(", paste the following."),tn=p(),en=t("pre"),pn=p(),on=t("p"),cn=e("You’re now ready to use SMUI packages. Here’s some example code."),ln=p(),un=t("pre"),rn=p(),kn=t("h2"),hn=e("Dark Mode"),mn=p(),dn=t("p"),gn=e("The best way to implement a dark mode is to recompile the Sass with a different theme. This involves running the same code through your bundler again with a different Sass configuration. The website accomplishes this within Sapper by using the following modified code from the Sapper installation instructions."),fn=p(),wn=t("pre"),yn=p(),vn=t("p"),En=e("This requires a separate ”_smui-theme.scss” file in a new directory under your “theme” directory named “dark”. This file should contain your dark theme configuration."),Sn=p(),Tn=t("p"),bn=e("If you followed the Sapper installation instructions, and modified the function above, you will now get an additional output file named “smui-dark.css”. This is your compiled dark theme."),Mn=p(),Pn=t("p"),xn=e("Now let’s get it on your page. In your template, where you included the “smui.css” file, instead use the following."),In=p(),qn=t("pre"),Ln=p(),jn=t("p"),On=e("This will get your dark theme working if the user has expressed a preference in their OS. To let the user choose which theme while on your site, you can do something like the following."),Hn=p(),Rn=t("pre"),Cn=p(),$n=t("p"),An=e("Now just call "),Dn=t("code"),Un=e("switchTheme()"),_n=e(" from a toggle button or something, and the theme will be switched to the other one."),this.h()},l(n){s=o(n,"H1",{id:!0});var t=c(s);a=l(t,"Integration for Sapper"),t.forEach(u),d=i(n),g=o(n,"SUB",{});var e=c(g);f=l(e,"\\* As of 2021-Apr-06, these instructions will now work without a flash of unstyled content!"),e.forEach(u),w=i(n),y=o(n,"P",{});var p=c(y);v=l(p,"These instructions are for the Advanced Styling Method. If you don’t need the advantages of this method, it’s much easier to use the "),E=o(p,"A",{href:!0});var r=c(E);S=l(r,"Easy Styling Method"),r.forEach(u),T=l(p,"."),p.forEach(u),b=i(n),M=o(n,"P",{});var k=c(M);P=l(k,"Install the following packages as dev dependencies."),k.forEach(u),x=i(n),I=o(n,"PRE",{class:!0}),c(I).forEach(u),q=i(n),L=o(n,"P",{});var h=c(L);j=l(h,"Create the "),O=o(h,"CODE",{});var m=c(O);H=l(m,"src/theme/_smui-theme.scss"),m.forEach(u),R=l(h," file."),h.forEach(u),C=i(n),$=o(n,"PRE",{class:!0}),c($).forEach(u),A=i(n),D=o(n,"P",{});var Nn=c(D);U=l(Nn,"Update "),_=o(Nn,"CODE",{});var Bn=c(_);N=l(Bn,"rollup.config.js"),Bn.forEach(u),B=l(Nn," with the following configuration."),Nn.forEach(u),z=i(n),Y=o(n,"PRE",{class:!0}),c(Y).forEach(u),F=i(n),G=o(n,"P",{});var zn=c(G);J=l(zn,"In the "),K=o(zn,"CODE",{});var Yn=c(K);Q=l(Yn,"template.html"),Yn.forEach(u),V=l(zn," file, in the "),W=o(zn,"CODE",{});var Fn=c(W);X=l(Fn,"<head>"),Fn.forEach(u),Z=l(zn," section right after "),nn=o(zn,"CODE",{});var Gn=c(nn);sn=l(Gn,"%sapper.base%"),Gn.forEach(u),an=l(zn,", paste the following."),zn.forEach(u),tn=i(n),en=o(n,"PRE",{class:!0}),c(en).forEach(u),pn=i(n),on=o(n,"P",{});var Jn=c(on);cn=l(Jn,"You’re now ready to use SMUI packages. Here’s some example code."),Jn.forEach(u),ln=i(n),un=o(n,"PRE",{class:!0}),c(un).forEach(u),rn=i(n),kn=o(n,"H2",{id:!0});var Kn=c(kn);hn=l(Kn,"Dark Mode"),Kn.forEach(u),mn=i(n),dn=o(n,"P",{});var Qn=c(dn);gn=l(Qn,"The best way to implement a dark mode is to recompile the Sass with a different theme. This involves running the same code through your bundler again with a different Sass configuration. The website accomplishes this within Sapper by using the following modified code from the Sapper installation instructions."),Qn.forEach(u),fn=i(n),wn=o(n,"PRE",{class:!0}),c(wn).forEach(u),yn=i(n),vn=o(n,"P",{});var Vn=c(vn);En=l(Vn,"This requires a separate ”_smui-theme.scss” file in a new directory under your “theme” directory named “dark”. This file should contain your dark theme configuration."),Vn.forEach(u),Sn=i(n),Tn=o(n,"P",{});var Wn=c(Tn);bn=l(Wn,"If you followed the Sapper installation instructions, and modified the function above, you will now get an additional output file named “smui-dark.css”. This is your compiled dark theme."),Wn.forEach(u),Mn=i(n),Pn=o(n,"P",{});var Xn=c(Pn);xn=l(Xn,"Now let’s get it on your page. In your template, where you included the “smui.css” file, instead use the following."),Xn.forEach(u),In=i(n),qn=o(n,"PRE",{class:!0}),c(qn).forEach(u),Ln=i(n),jn=o(n,"P",{});var Zn=c(jn);On=l(Zn,"This will get your dark theme working if the user has expressed a preference in their OS. To let the user choose which theme while on your site, you can do something like the following."),Zn.forEach(u),Hn=i(n),Rn=o(n,"PRE",{class:!0}),c(Rn).forEach(u),Cn=i(n),$n=o(n,"P",{});var ns=c($n);An=l(ns,"Now just call "),Dn=o(ns,"CODE",{});var ss=c(Dn);Un=l(ss,"switchTheme()"),ss.forEach(u),_n=l(ns," from a toggle button or something, and the theme will be switched to the other one."),ns.forEach(u),this.h()},h(){r(s,"id","integration-for-sapper"),r(E,"href","SASS.md#easy-styling-method"),r(I,"class","language-sh"),r($,"class","language-sh"),r(Y,"class","language-js"),r(en,"class","language-html"),r(un,"class","language-svelte"),r(kn,"id","dark-mode"),r(wn,"class","language-js"),r(qn,"class","language-html"),r(Rn,"class","language-js")},m(n,t){k(n,s,t),h(s,a),k(n,d,t),k(n,g,t),h(g,f),k(n,w,t),k(n,y,t),h(y,v),h(y,E),h(E,S),h(y,T),k(n,b,t),k(n,M,t),h(M,P),k(n,x,t),k(n,I,t),I.innerHTML='<code class="language-sh">npm install --save-dev rollup-plugin-postcss sass</code>',k(n,q,t),k(n,L,t),h(L,j),h(L,O),h(O,H),h(L,R),k(n,C,t),k(n,$,t),$.innerHTML='<code class="language-sh">npx smui-theme template src/theme</code>',k(n,A,t),k(n,D,t),h(D,U),h(D,_),h(_,N),h(D,B),k(n,z,t),k(n,Y,t),Y.innerHTML='<code class="language-js"><span class="token comment">// ...</span>\n<span class="token comment">// Put this along with the other imports.</span>\n<span class="token keyword">import</span> postcss <span class="token keyword">from</span> <span class="token string">"rollup-plugin-postcss"</span><span class="token punctuation">;</span>\n\n<span class="token comment">// ...</span>\n\n<span class="token comment">// Insert the following right before the "export default &#123;" line:</span>\n<span class="token keyword">const</span> <span class="token function-variable function">postcssOptions</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">extract</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">(</span><span class="token punctuation">&#123;</span>\n  extensions<span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">\'.scss\'</span><span class="token punctuation">]</span><span class="token punctuation">,</span>\n  extract<span class="token operator">:</span> extract <span class="token operator">?</span> <span class="token string">\'smui.css\'</span> <span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>\n  minimize<span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>\n  use<span class="token operator">:</span> <span class="token punctuation">[</span>\n    <span class="token punctuation">[</span>\n      <span class="token string">\'sass\'</span><span class="token punctuation">,</span>\n      <span class="token punctuation">&#123;</span>\n        includePaths<span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">\'./src/theme\'</span><span class="token punctuation">,</span> <span class="token string">\'./node_modules\'</span><span class="token punctuation">]</span><span class="token punctuation">,</span>\n      <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>\n    <span class="token punctuation">]</span><span class="token punctuation">,</span>\n  <span class="token punctuation">]</span><span class="token punctuation">,</span>\n<span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token comment">// Right after the "svelte" plugin in the "client:" section, paste the following plugin.</span>\n<span class="token function">postcss</span><span class="token punctuation">(</span><span class="token function">postcssOptions</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span>\n\n<span class="token comment">// Right after the "svelte" plugin in the "server:" section, paste the following plugin.</span>\n<span class="token function">postcss</span><span class="token punctuation">(</span><span class="token function">postcssOptions</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span>\n\n<span class="token comment">// Don\'t touch the "serviceworker:" section.</span>\n<span class="token comment">// ...</span></code>',k(n,F,t),k(n,G,t),h(G,J),h(G,K),h(K,Q),h(G,V),h(G,W),h(W,X),h(G,Z),h(G,nn),h(nn,sn),h(G,an),k(n,tn,t),k(n,en,t),en.innerHTML='<code class="language-html"><span class="token comment">&lt;!-- SMUI Styles --\x3e</span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>link</span> <span class="token attr-name">rel</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>stylesheet<span class="token punctuation">"</span></span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>client/smui.css<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>\n<span class="token comment">&lt;!-- Material Icons --\x3e</span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>link</span>\n  <span class="token attr-name">rel</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>stylesheet<span class="token punctuation">"</span></span>\n  <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>https://fonts.googleapis.com/icon?family=Material+Icons<span class="token punctuation">"</span></span>\n<span class="token punctuation">/></span></span>\n<span class="token comment">&lt;!-- Roboto --\x3e</span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>link</span>\n  <span class="token attr-name">rel</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>stylesheet<span class="token punctuation">"</span></span>\n  <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>https://fonts.googleapis.com/css?family=Roboto:300,400,500,600,700<span class="token punctuation">"</span></span>\n<span class="token punctuation">/></span></span></code>',k(n,pn,t),k(n,on,t),h(on,cn),k(n,ln,t),k(n,un,t),un.innerHTML='<code class="language-svelte">&lt;Button on:click=&#123;() => alert(\'Clicked!\')&#125;>Click Me!<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>Button</span><span class="token punctuation">></span></span>\n\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script"><span class="token language-javascript">\n  <span class="token keyword">import</span> Button <span class="token keyword">from</span> <span class="token string">\'@smui/button\'</span><span class="token punctuation">;</span>\n</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span></code>',k(n,rn,t),k(n,kn,t),h(kn,hn),k(n,mn,t),k(n,dn,t),h(dn,gn),k(n,fn,t),k(n,wn,t),wn.innerHTML='<code class="language-js"><span class="token keyword">import</span> fs <span class="token keyword">from</span> <span class="token string">\'fs\'</span><span class="token punctuation">;</span>\n\n<span class="token comment">// ...</span>\n\n<span class="token keyword">const</span> <span class="token function-variable function">postcssOptions</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">light</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">(</span><span class="token punctuation">&#123;</span>\n  extensions<span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">\'.scss\'</span><span class="token punctuation">]</span><span class="token punctuation">,</span>\n  extract<span class="token operator">:</span> <span class="token string">\'smui.css\'</span><span class="token punctuation">,</span>\n  minimize<span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>\n  onExtract<span class="token operator">:</span> light\n    <span class="token operator">?</span> <span class="token function-variable function">null</span>\n    <span class="token operator">:</span> <span class="token punctuation">(</span><span class="token parameter">getExtracted</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>\n        <span class="token keyword">let</span> <span class="token punctuation">&#123;</span> code <span class="token punctuation">&#125;</span> <span class="token operator">=</span> <span class="token function">getExtracted</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">\'cssnano\'</span><span class="token punctuation">)</span>\n          <span class="token punctuation">.</span><span class="token function">process</span><span class="token punctuation">(</span>code<span class="token punctuation">,</span> <span class="token punctuation">&#123;</span> <span class="token keyword">from</span><span class="token operator">:</span> <span class="token keyword">undefined</span> <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>\n          <span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter"><span class="token punctuation">&#123;</span> css <span class="token punctuation">&#125;</span></span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>\n            <span class="token keyword">const</span> filename <span class="token operator">=</span> <span class="token template-string"><span class="token template-punctuation string">&#96;</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span>config<span class="token punctuation">.</span>client<span class="token punctuation">.</span><span class="token function">output</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>dir<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token string">/smui-dark.css</span><span class="token template-punctuation string">&#96;</span></span><span class="token punctuation">;</span>\n            fs<span class="token punctuation">.</span><span class="token function">writeFileSync</span><span class="token punctuation">(</span>filename<span class="token punctuation">,</span> css<span class="token punctuation">)</span><span class="token punctuation">;</span>\n          <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>\n      <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>\n  use<span class="token operator">:</span> <span class="token punctuation">[</span>\n    <span class="token punctuation">[</span>\n      <span class="token string">\'sass\'</span><span class="token punctuation">,</span>\n      <span class="token punctuation">&#123;</span>\n        includePaths<span class="token operator">:</span> <span class="token punctuation">[</span><span class="token template-string"><span class="token template-punctuation string">&#96;</span><span class="token string">./src/theme</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span>light <span class="token operator">?</span> <span class="token string">\'\'</span> <span class="token operator">:</span> <span class="token string">\'/dark\'</span><span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token template-punctuation string">&#96;</span></span><span class="token punctuation">,</span> <span class="token string">\'./node_modules\'</span><span class="token punctuation">]</span><span class="token punctuation">,</span>\n      <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>\n    <span class="token punctuation">]</span><span class="token punctuation">,</span>\n  <span class="token punctuation">]</span><span class="token punctuation">,</span>\n<span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code>',k(n,yn,t),k(n,vn,t),h(vn,En),k(n,Sn,t),k(n,Tn,t),h(Tn,bn),k(n,Mn,t),k(n,Pn,t),h(Pn,xn),k(n,In,t),k(n,qn,t),qn.innerHTML='<code class="language-html"><span class="token comment">&lt;!-- SMUI Styles --\x3e</span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>link</span>\n  <span class="token attr-name">rel</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>stylesheet<span class="token punctuation">"</span></span>\n  <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>client/smui.css<span class="token punctuation">"</span></span>\n  <span class="token attr-name">media</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>(prefers-color-scheme: light)<span class="token punctuation">"</span></span>\n<span class="token punctuation">/></span></span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>link</span>\n  <span class="token attr-name">rel</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>stylesheet<span class="token punctuation">"</span></span>\n  <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>client/smui-dark.css<span class="token punctuation">"</span></span>\n  <span class="token attr-name">media</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>screen and (prefers-color-scheme: dark)<span class="token punctuation">"</span></span>\n<span class="token punctuation">/></span></span></code>',k(n,Ln,t),k(n,jn,t),h(jn,On),k(n,Hn,t),k(n,Rn,t),Rn.innerHTML='<code class="language-js"><span class="token keyword">let</span> lightTheme <span class="token operator">=</span>\n  <span class="token keyword">typeof</span> window <span class="token operator">===</span> <span class="token string">\'undefined\'</span> <span class="token operator">||</span>\n  window<span class="token punctuation">.</span><span class="token function">matchMedia</span><span class="token punctuation">(</span><span class="token string">\'(prefers-color-scheme: light)\'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>matches<span class="token punctuation">;</span>\n<span class="token keyword">function</span> <span class="token function">switchTheme</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>\n  lightTheme <span class="token operator">=</span> <span class="token operator">!</span>lightTheme<span class="token punctuation">;</span>\n  <span class="token keyword">let</span> themeLink <span class="token operator">=</span> document<span class="token punctuation">.</span>head<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token string">\'#theme\'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>themeLink<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>\n    themeLink <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">createElement</span><span class="token punctuation">(</span><span class="token string">\'link\'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    themeLink<span class="token punctuation">.</span>rel <span class="token operator">=</span> <span class="token string">\'stylesheet\'</span><span class="token punctuation">;</span>\n    themeLink<span class="token punctuation">.</span>id <span class="token operator">=</span> <span class="token string">\'theme\'</span><span class="token punctuation">;</span>\n  <span class="token punctuation">&#125;</span>\n  themeLink<span class="token punctuation">.</span>href <span class="token operator">=</span> <span class="token template-string"><span class="token template-punctuation string">&#96;</span><span class="token string">client/smui</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span>lightTheme <span class="token operator">?</span> <span class="token string">\'\'</span> <span class="token operator">:</span> <span class="token string">\'-dark\'</span><span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token string">.css</span><span class="token template-punctuation string">&#96;</span></span><span class="token punctuation">;</span>\n  document<span class="token punctuation">.</span>head\n    <span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token string">\'link[href="client/smui-dark.css"]\'</span><span class="token punctuation">)</span>\n    <span class="token punctuation">.</span><span class="token function">insertAdjacentElement</span><span class="token punctuation">(</span><span class="token string">\'afterend\'</span><span class="token punctuation">,</span> themeLink<span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">&#125;</span></code>',k(n,Cn,t),k(n,$n,t),h($n,An),h($n,Dn),h(Dn,Un),h($n,_n)},p:m,i:m,o:m,d(n){n&&u(s),n&&u(d),n&&u(g),n&&u(w),n&&u(y),n&&u(b),n&&u(M),n&&u(x),n&&u(I),n&&u(q),n&&u(L),n&&u(C),n&&u($),n&&u(A),n&&u(D),n&&u(z),n&&u(Y),n&&u(F),n&&u(G),n&&u(tn),n&&u(en),n&&u(pn),n&&u(on),n&&u(ln),n&&u(un),n&&u(rn),n&&u(kn),n&&u(mn),n&&u(dn),n&&u(fn),n&&u(wn),n&&u(yn),n&&u(vn),n&&u(Sn),n&&u(Tn),n&&u(Mn),n&&u(Pn),n&&u(In),n&&u(qn),n&&u(Ln),n&&u(jn),n&&u(Hn),n&&u(Rn),n&&u(Cn),n&&u($n)}}}class T extends n{constructor(n){super(),s(this,n,null,S,a,{})}}function b(n){let s,a,e,l;return e=new T({}),{c(){s=p(),a=t("section"),d(e.$$.fragment),this.h()},l(n){g('[data-svelte="svelte-12erzwb"]',document.head).forEach(u),s=i(n),a=o(n,"SECTION",{class:!0});var t=c(a);f(e.$$.fragment,t),t.forEach(u),this.h()},h(){document.title="Sapper - SMUI",r(a,"class","markdown")},m(n,t){k(n,s,t),k(n,a,t),w(e,a,null),l=!0},p:m,i(n){l||(y(e.$$.fragment,n),l=!0)},o(n){v(e.$$.fragment,n),l=!1},d(n){n&&u(s),n&&u(a),E(e)}}}export default class extends n{constructor(n){super(),s(this,n,null,b,a,{})}}
