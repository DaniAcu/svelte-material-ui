import{S as n,i as s,s as a,f as t,t as e,e as p,k as o,l as c,m as l,h as i,j as u,p as r,r as k,u as h,E as m,_ as f,a as d,b as g,c as w,d as y,g as v,q as b,n as E,v as T,x as S,y as P,z as x}from"./client.96e14a9c.js";import"@babel/runtime/helpers/esm/classCallCheck";import"@babel/runtime/helpers/esm/createClass";import"@babel/runtime/helpers/esm/assertThisInitialized";import"@babel/runtime/helpers/esm/inherits";import"@babel/runtime/helpers/esm/possibleConstructorReturn";import"@babel/runtime/helpers/esm/getPrototypeOf";import"@babel/runtime/helpers/esm/slicedToArray";import"@babel/runtime/helpers/esm/defineProperty";import"@babel/runtime/helpers/esm/construct";import"@babel/runtime/helpers/esm/toConsumableArray";import"@babel/runtime/helpers/esm/typeof";function M(n){let s,a,f,d,g,w,y,v,b,E,T,S,P,x,M,I,q,R,C,L,O,j,H,A,$,D,U,_,B,z,N,Y,F,G,J,K,Q,V,W,X,Z,nn,sn,an,tn,en,pn,on,cn,ln,un,rn,kn,hn,mn,fn,dn,gn,wn,yn,vn,bn,En,Tn,Sn,Pn,xn,Mn,In,qn,Rn,Cn,Ln,On,jn,Hn,An,$n,Dn,Un,_n;return{c(){s=t("h1"),a=e("Integration for Sapper"),f=p(),d=t("sub"),g=e("\\* As of 2021-Apr-06, these instructions will now work without a flash of unstyled content!"),w=p(),y=t("p"),v=e("These instructions are for the Advanced Styling Method. If you don’t need the advantages of this method, it’s much easier to use the "),b=t("a"),E=e("Easy Styling Method"),T=e("."),S=p(),P=t("p"),x=e("Install the following packages as dev dependencies."),M=p(),I=t("pre"),q=p(),R=t("p"),C=e("Create the "),L=t("code"),O=e("src/theme/_smui-theme.scss"),j=e(" file."),H=p(),A=t("pre"),$=p(),D=t("p"),U=e("Update "),_=t("code"),B=e("rollup.config.js"),z=e(" with the following configuration."),N=p(),Y=t("pre"),F=p(),G=t("p"),J=e("In the "),K=t("code"),Q=e("template.html"),V=e(" file, in the "),W=t("code"),X=e("<head>"),Z=e(" section right after "),nn=t("code"),sn=e("%sapper.base%"),an=e(", paste the following."),tn=p(),en=t("pre"),pn=p(),on=t("p"),cn=e("You’re now ready to use SMUI packages. Here’s some example code."),ln=p(),un=t("pre"),rn=p(),kn=t("h2"),hn=e("Dark Mode"),mn=p(),fn=t("p"),dn=e("The best way to implement a dark mode is to recompile the Sass with a different theme. This involves running the same code through your bundler again with a different Sass configuration. The website accomplishes this within Sapper by using the following modified code from the Sapper installation instructions."),gn=p(),wn=t("pre"),yn=p(),vn=t("p"),bn=e("This requires a separate ”_smui-theme.scss” file in a new directory under your “theme” directory named “dark”. This file should contain your dark theme configuration."),En=p(),Tn=t("p"),Sn=e("If you followed the Sapper installation instructions, and modified the function above, you will now get an additional output file named “smui-dark.css”. This is your compiled dark theme."),Pn=p(),xn=t("p"),Mn=e("Now let’s get it on your page. In your template, where you included the “smui.css” file, instead use the following."),In=p(),qn=t("pre"),Rn=p(),Cn=t("p"),Ln=e("This will get your dark theme working if the user has expressed a preference in their OS. To let the user choose which theme while on your site, you can do something like the following."),On=p(),jn=t("pre"),Hn=p(),An=t("p"),$n=e("Now just call "),Dn=t("code"),Un=e("switchTheme()"),_n=e(" from a toggle button or something, and the theme will be switched to the other one."),this.h()},l(n){s=o(n,"H1",{id:!0});var t=c(s);a=l(t,"Integration for Sapper"),t.forEach(i),f=u(n),d=o(n,"SUB",{});var e=c(d);g=l(e,"\\* As of 2021-Apr-06, these instructions will now work without a flash of unstyled content!"),e.forEach(i),w=u(n),y=o(n,"P",{});var p=c(y);v=l(p,"These instructions are for the Advanced Styling Method. If you don’t need the advantages of this method, it’s much easier to use the "),b=o(p,"A",{href:!0});var r=c(b);E=l(r,"Easy Styling Method"),r.forEach(i),T=l(p,"."),p.forEach(i),S=u(n),P=o(n,"P",{});var k=c(P);x=l(k,"Install the following packages as dev dependencies."),k.forEach(i),M=u(n),I=o(n,"PRE",{class:!0}),c(I).forEach(i),q=u(n),R=o(n,"P",{});var h=c(R);C=l(h,"Create the "),L=o(h,"CODE",{});var m=c(L);O=l(m,"src/theme/_smui-theme.scss"),m.forEach(i),j=l(h," file."),h.forEach(i),H=u(n),A=o(n,"PRE",{class:!0}),c(A).forEach(i),$=u(n),D=o(n,"P",{});var Bn=c(D);U=l(Bn,"Update "),_=o(Bn,"CODE",{});var zn=c(_);B=l(zn,"rollup.config.js"),zn.forEach(i),z=l(Bn," with the following configuration."),Bn.forEach(i),N=u(n),Y=o(n,"PRE",{class:!0}),c(Y).forEach(i),F=u(n),G=o(n,"P",{});var Nn=c(G);J=l(Nn,"In the "),K=o(Nn,"CODE",{});var Yn=c(K);Q=l(Yn,"template.html"),Yn.forEach(i),V=l(Nn," file, in the "),W=o(Nn,"CODE",{});var Fn=c(W);X=l(Fn,"<head>"),Fn.forEach(i),Z=l(Nn," section right after "),nn=o(Nn,"CODE",{});var Gn=c(nn);sn=l(Gn,"%sapper.base%"),Gn.forEach(i),an=l(Nn,", paste the following."),Nn.forEach(i),tn=u(n),en=o(n,"PRE",{class:!0}),c(en).forEach(i),pn=u(n),on=o(n,"P",{});var Jn=c(on);cn=l(Jn,"You’re now ready to use SMUI packages. Here’s some example code."),Jn.forEach(i),ln=u(n),un=o(n,"PRE",{class:!0}),c(un).forEach(i),rn=u(n),kn=o(n,"H2",{id:!0});var Kn=c(kn);hn=l(Kn,"Dark Mode"),Kn.forEach(i),mn=u(n),fn=o(n,"P",{});var Qn=c(fn);dn=l(Qn,"The best way to implement a dark mode is to recompile the Sass with a different theme. This involves running the same code through your bundler again with a different Sass configuration. The website accomplishes this within Sapper by using the following modified code from the Sapper installation instructions."),Qn.forEach(i),gn=u(n),wn=o(n,"PRE",{class:!0}),c(wn).forEach(i),yn=u(n),vn=o(n,"P",{});var Vn=c(vn);bn=l(Vn,"This requires a separate ”_smui-theme.scss” file in a new directory under your “theme” directory named “dark”. This file should contain your dark theme configuration."),Vn.forEach(i),En=u(n),Tn=o(n,"P",{});var Wn=c(Tn);Sn=l(Wn,"If you followed the Sapper installation instructions, and modified the function above, you will now get an additional output file named “smui-dark.css”. This is your compiled dark theme."),Wn.forEach(i),Pn=u(n),xn=o(n,"P",{});var Xn=c(xn);Mn=l(Xn,"Now let’s get it on your page. In your template, where you included the “smui.css” file, instead use the following."),Xn.forEach(i),In=u(n),qn=o(n,"PRE",{class:!0}),c(qn).forEach(i),Rn=u(n),Cn=o(n,"P",{});var Zn=c(Cn);Ln=l(Zn,"This will get your dark theme working if the user has expressed a preference in their OS. To let the user choose which theme while on your site, you can do something like the following."),Zn.forEach(i),On=u(n),jn=o(n,"PRE",{class:!0}),c(jn).forEach(i),Hn=u(n),An=o(n,"P",{});var ns=c(An);$n=l(ns,"Now just call "),Dn=o(ns,"CODE",{});var ss=c(Dn);Un=l(ss,"switchTheme()"),ss.forEach(i),_n=l(ns," from a toggle button or something, and the theme will be switched to the other one."),ns.forEach(i),this.h()},h(){r(s,"id","integration-for-sapper"),r(b,"href","SASS.md#easy-styling-method"),r(I,"class","language-sh"),r(A,"class","language-sh"),r(Y,"class","language-js"),r(en,"class","language-html"),r(un,"class","language-svelte"),r(kn,"id","dark-mode"),r(wn,"class","language-js"),r(qn,"class","language-html"),r(jn,"class","language-js")},m(n,t){k(n,s,t),h(s,a),k(n,f,t),k(n,d,t),h(d,g),k(n,w,t),k(n,y,t),h(y,v),h(y,b),h(b,E),h(y,T),k(n,S,t),k(n,P,t),h(P,x),k(n,M,t),k(n,I,t),I.innerHTML='<code class="language-sh">npm install --save-dev rollup-plugin-postcss sass</code>',k(n,q,t),k(n,R,t),h(R,C),h(R,L),h(L,O),h(R,j),k(n,H,t),k(n,A,t),A.innerHTML='<code class="language-sh">npx smui-theme template src/theme</code>',k(n,$,t),k(n,D,t),h(D,U),h(D,_),h(_,B),h(D,z),k(n,N,t),k(n,Y,t),Y.innerHTML='<code class="language-js"><span class="token comment">// ...</span>\n<span class="token comment">// Put this along with the other imports.</span>\n<span class="token keyword">import</span> postcss <span class="token keyword">from</span> <span class="token string">"rollup-plugin-postcss"</span><span class="token punctuation">;</span>\n\n<span class="token comment">// ...</span>\n\n<span class="token comment">// Insert the following right before the "export default &#123;" line:</span>\n<span class="token keyword">const</span> <span class="token function-variable function">postcssOptions</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">extract</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">(</span><span class="token punctuation">&#123;</span>\n  extensions<span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">\'.scss\'</span><span class="token punctuation">]</span><span class="token punctuation">,</span>\n  extract<span class="token operator">:</span> extract <span class="token operator">?</span> <span class="token string">\'smui.css\'</span> <span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>\n  minimize<span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>\n  use<span class="token operator">:</span> <span class="token punctuation">[</span>\n    <span class="token punctuation">[</span>\n      <span class="token string">\'sass\'</span><span class="token punctuation">,</span>\n      <span class="token punctuation">&#123;</span>\n        includePaths<span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">\'./src/theme\'</span><span class="token punctuation">,</span> <span class="token string">\'./node_modules\'</span><span class="token punctuation">]</span><span class="token punctuation">,</span>\n      <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>\n    <span class="token punctuation">]</span><span class="token punctuation">,</span>\n  <span class="token punctuation">]</span><span class="token punctuation">,</span>\n<span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token comment">// Right after the "svelte" plugin in the "client:" section, paste the following plugin.</span>\n<span class="token function">postcss</span><span class="token punctuation">(</span><span class="token function">postcssOptions</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span>\n\n<span class="token comment">// Right after the "svelte" plugin in the "server:" section, paste the following plugin.</span>\n<span class="token function">postcss</span><span class="token punctuation">(</span><span class="token function">postcssOptions</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span>\n\n<span class="token comment">// Don\'t touch the "serviceworker:" section.</span>\n<span class="token comment">// ...</span></code>',k(n,F,t),k(n,G,t),h(G,J),h(G,K),h(K,Q),h(G,V),h(G,W),h(W,X),h(G,Z),h(G,nn),h(nn,sn),h(G,an),k(n,tn,t),k(n,en,t),en.innerHTML='<code class="language-html"><span class="token comment">&lt;!-- SMUI Styles --\x3e</span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>link</span> <span class="token attr-name">rel</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>stylesheet<span class="token punctuation">"</span></span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>client/smui.css<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>\n<span class="token comment">&lt;!-- Material Icons --\x3e</span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>link</span>\n  <span class="token attr-name">rel</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>stylesheet<span class="token punctuation">"</span></span>\n  <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>https://fonts.googleapis.com/icon?family=Material+Icons<span class="token punctuation">"</span></span>\n<span class="token punctuation">/></span></span>\n<span class="token comment">&lt;!-- Roboto --\x3e</span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>link</span>\n  <span class="token attr-name">rel</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>stylesheet<span class="token punctuation">"</span></span>\n  <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>https://fonts.googleapis.com/css?family=Roboto:300,400,500,600,700<span class="token punctuation">"</span></span>\n<span class="token punctuation">/></span></span></code>',k(n,pn,t),k(n,on,t),h(on,cn),k(n,ln,t),k(n,un,t),un.innerHTML='<code class="language-svelte">&lt;Button on:click=&#123;() => alert(\'Clicked!\')&#125;>Click Me!<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>Button</span><span class="token punctuation">></span></span>\n\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script"><span class="token language-javascript">\n  <span class="token keyword">import</span> Button <span class="token keyword">from</span> <span class="token string">\'@smui/button\'</span><span class="token punctuation">;</span>\n</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span></code>',k(n,rn,t),k(n,kn,t),h(kn,hn),k(n,mn,t),k(n,fn,t),h(fn,dn),k(n,gn,t),k(n,wn,t),wn.innerHTML='<code class="language-js"><span class="token keyword">import</span> fs <span class="token keyword">from</span> <span class="token string">\'fs\'</span><span class="token punctuation">;</span>\n\n<span class="token comment">// ...</span>\n\n<span class="token keyword">const</span> <span class="token function-variable function">postcssOptions</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">light</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">(</span><span class="token punctuation">&#123;</span>\n  extensions<span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">\'.scss\'</span><span class="token punctuation">]</span><span class="token punctuation">,</span>\n  extract<span class="token operator">:</span> <span class="token string">\'smui.css\'</span><span class="token punctuation">,</span>\n  minimize<span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>\n  onExtract<span class="token operator">:</span> light\n    <span class="token operator">?</span> <span class="token function-variable function">null</span>\n    <span class="token operator">:</span> <span class="token punctuation">(</span><span class="token parameter">getExtracted</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>\n        <span class="token keyword">let</span> <span class="token punctuation">&#123;</span> code <span class="token punctuation">&#125;</span> <span class="token operator">=</span> <span class="token function">getExtracted</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">\'cssnano\'</span><span class="token punctuation">)</span>\n          <span class="token punctuation">.</span><span class="token function">process</span><span class="token punctuation">(</span>code<span class="token punctuation">,</span> <span class="token punctuation">&#123;</span> <span class="token keyword">from</span><span class="token operator">:</span> <span class="token keyword">undefined</span> <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>\n          <span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter"><span class="token punctuation">&#123;</span> css <span class="token punctuation">&#125;</span></span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>\n            <span class="token keyword">const</span> filename <span class="token operator">=</span> <span class="token template-string"><span class="token template-punctuation string">&#96;</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span>config<span class="token punctuation">.</span>client<span class="token punctuation">.</span><span class="token function">output</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>dir<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token string">/smui-dark.css</span><span class="token template-punctuation string">&#96;</span></span><span class="token punctuation">;</span>\n            fs<span class="token punctuation">.</span><span class="token function">writeFileSync</span><span class="token punctuation">(</span>filename<span class="token punctuation">,</span> css<span class="token punctuation">)</span><span class="token punctuation">;</span>\n          <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>\n      <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>\n  use<span class="token operator">:</span> <span class="token punctuation">[</span>\n    <span class="token punctuation">[</span>\n      <span class="token string">\'sass\'</span><span class="token punctuation">,</span>\n      <span class="token punctuation">&#123;</span>\n        includePaths<span class="token operator">:</span> <span class="token punctuation">[</span><span class="token template-string"><span class="token template-punctuation string">&#96;</span><span class="token string">./src/theme</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span>light <span class="token operator">?</span> <span class="token string">\'\'</span> <span class="token operator">:</span> <span class="token string">\'/dark\'</span><span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token template-punctuation string">&#96;</span></span><span class="token punctuation">,</span> <span class="token string">\'./node_modules\'</span><span class="token punctuation">]</span><span class="token punctuation">,</span>\n      <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>\n    <span class="token punctuation">]</span><span class="token punctuation">,</span>\n  <span class="token punctuation">]</span><span class="token punctuation">,</span>\n<span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code>',k(n,yn,t),k(n,vn,t),h(vn,bn),k(n,En,t),k(n,Tn,t),h(Tn,Sn),k(n,Pn,t),k(n,xn,t),h(xn,Mn),k(n,In,t),k(n,qn,t),qn.innerHTML='<code class="language-html"><span class="token comment">&lt;!-- SMUI Styles --\x3e</span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>link</span>\n  <span class="token attr-name">rel</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>stylesheet<span class="token punctuation">"</span></span>\n  <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>client/smui.css<span class="token punctuation">"</span></span>\n  <span class="token attr-name">media</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>(prefers-color-scheme: light)<span class="token punctuation">"</span></span>\n<span class="token punctuation">/></span></span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>link</span>\n  <span class="token attr-name">rel</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>stylesheet<span class="token punctuation">"</span></span>\n  <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>client/smui-dark.css<span class="token punctuation">"</span></span>\n  <span class="token attr-name">media</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>screen and (prefers-color-scheme: dark)<span class="token punctuation">"</span></span>\n<span class="token punctuation">/></span></span></code>',k(n,Rn,t),k(n,Cn,t),h(Cn,Ln),k(n,On,t),k(n,jn,t),jn.innerHTML='<code class="language-js"><span class="token keyword">let</span> lightTheme <span class="token operator">=</span>\n  <span class="token keyword">typeof</span> window <span class="token operator">===</span> <span class="token string">\'undefined\'</span> <span class="token operator">||</span>\n  window<span class="token punctuation">.</span><span class="token function">matchMedia</span><span class="token punctuation">(</span><span class="token string">\'(prefers-color-scheme: light)\'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>matches<span class="token punctuation">;</span>\n<span class="token keyword">function</span> <span class="token function">switchTheme</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>\n  lightTheme <span class="token operator">=</span> <span class="token operator">!</span>lightTheme<span class="token punctuation">;</span>\n  <span class="token keyword">let</span> themeLink <span class="token operator">=</span> document<span class="token punctuation">.</span>head<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token string">\'#theme\'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>themeLink<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>\n    themeLink <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">createElement</span><span class="token punctuation">(</span><span class="token string">\'link\'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    themeLink<span class="token punctuation">.</span>rel <span class="token operator">=</span> <span class="token string">\'stylesheet\'</span><span class="token punctuation">;</span>\n    themeLink<span class="token punctuation">.</span>id <span class="token operator">=</span> <span class="token string">\'theme\'</span><span class="token punctuation">;</span>\n  <span class="token punctuation">&#125;</span>\n  themeLink<span class="token punctuation">.</span>href <span class="token operator">=</span> <span class="token template-string"><span class="token template-punctuation string">&#96;</span><span class="token string">client/smui</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span>lightTheme <span class="token operator">?</span> <span class="token string">\'\'</span> <span class="token operator">:</span> <span class="token string">\'-dark\'</span><span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token string">.css</span><span class="token template-punctuation string">&#96;</span></span><span class="token punctuation">;</span>\n  document<span class="token punctuation">.</span>head\n    <span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token string">\'link[href="client/smui-dark.css"]\'</span><span class="token punctuation">)</span>\n    <span class="token punctuation">.</span><span class="token function">insertAdjacentElement</span><span class="token punctuation">(</span><span class="token string">\'afterend\'</span><span class="token punctuation">,</span> themeLink<span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">&#125;</span></code>',k(n,Hn,t),k(n,An,t),h(An,$n),h(An,Dn),h(Dn,Un),h(An,_n)},p:m,i:m,o:m,d(n){n&&i(s),n&&i(f),n&&i(d),n&&i(w),n&&i(y),n&&i(S),n&&i(P),n&&i(M),n&&i(I),n&&i(q),n&&i(R),n&&i(H),n&&i(A),n&&i($),n&&i(D),n&&i(N),n&&i(Y),n&&i(F),n&&i(G),n&&i(tn),n&&i(en),n&&i(pn),n&&i(on),n&&i(ln),n&&i(un),n&&i(rn),n&&i(kn),n&&i(mn),n&&i(fn),n&&i(gn),n&&i(wn),n&&i(yn),n&&i(vn),n&&i(En),n&&i(Tn),n&&i(Pn),n&&i(xn),n&&i(In),n&&i(qn),n&&i(Rn),n&&i(Cn),n&&i(On),n&&i(jn),n&&i(Hn),n&&i(An)}}}class I extends n{constructor(n){super(),s(this,n,null,M,a,{})}}function q(n){var s=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Boolean.prototype.valueOf.call(Reflect.construct(Boolean,[],(function(){}))),!0}catch(n){return!1}}();return function(){var a,t=d(n);if(s){var e=d(this).constructor;a=Reflect.construct(t,arguments,e)}else a=t.apply(this,arguments);return g(this,a)}}function R(n){var s,a,e,l;return e=new I({}),{c:function(){s=p(),a=t("section"),v(e.$$.fragment),this.h()},l:function(n){b('[data-svelte="svelte-12erzwb"]',document.head).forEach(i),s=u(n),a=o(n,"SECTION",{class:!0});var t=c(a);E(e.$$.fragment,t),t.forEach(i),this.h()},h:function(){document.title="Sapper - SMUI",r(a,"class","markdown")},m:function(n,t){k(n,s,t),k(n,a,t),T(e,a,null),l=!0},p:m,i:function(n){l||(S(e.$$.fragment,n),l=!0)},o:function(n){P(e.$$.fragment,n),l=!1},d:function(n){n&&i(s),n&&i(a),x(e)}}}var C=function(t){f(p,n);var e=q(p);function p(n){var t;return w(this,p),t=e.call(this),s(y(t),n,null,R,a,{}),t}return p}();export default C;
